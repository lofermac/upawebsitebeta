/**
 * SISTEMA DE GEOLOCALIZA√á√ÉO POR IP
 * 
 * Este m√≥dulo busca o pa√≠s do usu√°rio atrav√©s do IP usando a API ipapi.co (gratuita).
 * Implementa cache no localStorage com validade de 30 dias para economizar requests.
 * 
 * @author Universal Poker
 */

// Interface para a resposta da API ipapi.co
interface IPApiResponse {
  country_code: string;
  country_name: string;
  city?: string;
  region?: string;
  ip?: string;
}

// Interface para o cache no localStorage
interface GeolocationCache {
  countryCode: string;
  timestamp: number;
}

// Constantes
const CACHE_KEY = 'user_country_cache';
const CACHE_DURATION_MS = 30 * 24 * 60 * 60 * 1000; // 30 dias em milissegundos
const API_URL = 'https://ipapi.co/json/';
const FALLBACK_COUNTRY = 'US'; // Pa√≠s padr√£o em caso de erro

/**
 * Busca o c√≥digo do pa√≠s do usu√°rio baseado no IP
 * 
 * Fluxo:
 * 1. Verifica se existe cache v√°lido no localStorage
 * 2. Se n√£o houver cache ou estiver expirado, faz request para ipapi.co
 * 3. Salva o resultado no cache com timestamp
 * 4. Retorna o country_code (ex: "BR", "US", "PT")
 * 5. Em caso de erro, retorna fallback "US"
 * 
 * @returns {Promise<string>} C√≥digo do pa√≠s em formato ISO (2 letras mai√∫sculas)
 * 
 * @example
 * const country = await getUserCountry();
 * console.log(country); // "BR"
 */
export async function getUserCountry(): Promise<string> {
  try {
    // 1. Verificar cache no localStorage
    const cachedData = getCachedCountry();
    if (cachedData) {
      console.log('üåç Pa√≠s obtido do cache:', cachedData);
      return cachedData;
    }

    // 2. Cache n√£o existe ou est√° expirado - fazer request para API
    console.log('üåê Buscando pa√≠s via API ipapi.co...');
    
    const response = await fetch(API_URL, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`API ipapi.co retornou erro: ${response.status}`);
    }

    const data: IPApiResponse = await response.json();
    
    // Validar se recebemos um country_code v√°lido
    if (!data.country_code || data.country_code.length !== 2) {
      throw new Error('country_code inv√°lido na resposta da API');
    }

    const countryCode = data.country_code.toUpperCase();
    
    // 3. Salvar no cache
    setCachedCountry(countryCode);
    
    console.log('‚úÖ Pa√≠s detectado:', countryCode, `(${data.country_name})`);
    
    return countryCode;

  } catch (error) {
    // 4. Em caso de erro, retornar fallback
    console.error('‚ùå Erro ao detectar pa√≠s:', error);
    console.log(`‚ö†Ô∏è Usando pa√≠s fallback: ${FALLBACK_COUNTRY}`);
    
    return FALLBACK_COUNTRY;
  }
}

/**
 * Busca o pa√≠s do cache do localStorage
 * 
 * @returns {string | null} C√≥digo do pa√≠s em cache ou null se n√£o existir/expirado
 */
function getCachedCountry(): string | null {
  try {
    // Verificar se localStorage est√° dispon√≠vel (pode n√£o estar em SSR)
    if (typeof window === 'undefined') {
      return null;
    }

    const cached = localStorage.getItem(CACHE_KEY);
    
    if (!cached) {
      return null;
    }

    const cacheData: GeolocationCache = JSON.parse(cached);
    const now = Date.now();
    const cacheAge = now - cacheData.timestamp;

    // Verificar se o cache ainda √© v√°lido (< 30 dias)
    if (cacheAge > CACHE_DURATION_MS) {
      console.log('‚è∞ Cache de pa√≠s expirado, removendo...');
      localStorage.removeItem(CACHE_KEY);
      return null;
    }

    return cacheData.countryCode;

  } catch (error) {
    console.error('Erro ao ler cache de pa√≠s:', error);
    return null;
  }
}

/**
 * Salva o c√≥digo do pa√≠s no cache do localStorage
 * 
 * @param {string} countryCode - C√≥digo do pa√≠s (ex: "BR")
 */
function setCachedCountry(countryCode: string): void {
  try {
    // Verificar se localStorage est√° dispon√≠vel
    if (typeof window === 'undefined') {
      return;
    }

    const cacheData: GeolocationCache = {
      countryCode,
      timestamp: Date.now(),
    };

    localStorage.setItem(CACHE_KEY, JSON.stringify(cacheData));
    console.log('üíæ Pa√≠s salvo no cache (v√°lido por 30 dias)');

  } catch (error) {
    console.error('Erro ao salvar cache de pa√≠s:', error);
  }
}

/**
 * Limpa o cache de pa√≠s (√∫til para testes ou for√ßar nova detec√ß√£o)
 * 
 * @example
 * clearCountryCache();
 */
export function clearCountryCache(): void {
  try {
    if (typeof window !== 'undefined') {
      localStorage.removeItem(CACHE_KEY);
      console.log('üóëÔ∏è Cache de pa√≠s limpo');
    }
  } catch (error) {
    console.error('Erro ao limpar cache de pa√≠s:', error);
  }
}

